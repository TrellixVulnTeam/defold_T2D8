
function comparetables(t1, t2)
    if #t1 ~= #t2 then return false end
    for i=1,#t1 do
        if t1[i] ~= t2[i] then return false end
    end
    return true
end


function test_number_types(thebuffer)
    -- float data

    metadata1 = { -1.5, -2.5, -3.5, 1.5, 2.5, 3.5 }
    buffer.set_metadata(thebuffer, hash("floats"), metadata1, buffer.VALUE_TYPE_FLOAT32)
    metadata2, thetype = buffer.get_metadata(thebuffer, "floats")
    assert( comparetables(metadata1, metadata2) )
    assert( thetype == buffer.VALUE_TYPE_FLOAT32 )

    -- unsigned int data

    local metadata1 = { 1, 2, 3, 4, 5, 6 }
    buffer.set_metadata(thebuffer, hash("unsigned8"), metadata1, buffer.VALUE_TYPE_UINT8)
    local metadata2, thetype = buffer.get_metadata(thebuffer, "unsigned8")
    assert( comparetables(metadata1, metadata2) )
    assert( thetype == buffer.VALUE_TYPE_UINT8 )

    metadata1 = { 257, 2, 3, 4, 5, 6 }
    buffer.set_metadata(thebuffer, hash("unsigned16"), metadata1, buffer.VALUE_TYPE_UINT16)
    metadata2, thetype = buffer.get_metadata(thebuffer, "unsigned16")
    assert( comparetables(metadata1, metadata2) )
    assert( thetype == buffer.VALUE_TYPE_UINT16 )

    metadata1 = { 65537, 2, 3, 4, 5, 6 }
    buffer.set_metadata(thebuffer, hash("unsigned32"), metadata1, buffer.VALUE_TYPE_UINT32)
    metadata2, thetype = buffer.get_metadata(thebuffer, "unsigned32")
    assert( comparetables(metadata1, metadata2) )
    assert( thetype == buffer.VALUE_TYPE_UINT32 )

    metadata1 = { math.pow(2,32)+2, 2, 3, 4, 5, 6 }
    buffer.set_metadata(thebuffer, hash("unsigned64"), metadata1, buffer.VALUE_TYPE_UINT64)
    metadata2, thetype = buffer.get_metadata(thebuffer, "unsigned64")
    assert( comparetables(metadata1, metadata2) )
    assert( thetype == buffer.VALUE_TYPE_UINT64 )

    -- signed int data
    local metadata1 = { -1, -2, -3, 4, 5, 6 }
    buffer.set_metadata(thebuffer, hash("signed8"), metadata1, buffer.VALUE_TYPE_INT8)
    local metadata2, thetype = buffer.get_metadata(thebuffer, "signed8")
    assert( comparetables(metadata1, metadata2) )
    assert( thetype == buffer.VALUE_TYPE_INT8 )

    metadata1 = { -129, 2, 3, 4, 5, 6 }
    buffer.set_metadata(thebuffer, hash("signed16"), metadata1, buffer.VALUE_TYPE_INT16)
    metadata2, thetype = buffer.get_metadata(thebuffer, "signed16")
    assert( comparetables(metadata1, metadata2) )
    assert( thetype == buffer.VALUE_TYPE_INT16 )

    metadata1 = { -33000, 2, 3, 4, 5, 6 }
    buffer.set_metadata(thebuffer, hash("signed32"), metadata1, buffer.VALUE_TYPE_INT32)
    metadata2, thetype = buffer.get_metadata(thebuffer, "signed32")
    assert( comparetables(metadata1, metadata2) )
    assert( thetype == buffer.VALUE_TYPE_INT32 )

    metadata1 = { -math.pow(2,32), 2, 3, 4, 5, 6 }
    buffer.set_metadata(thebuffer, hash("signed64"), metadata1, buffer.VALUE_TYPE_INT64)
    metadata2, thetype = buffer.get_metadata(thebuffer, "signed64")
    assert( comparetables(metadata1, metadata2) )
    assert( thetype == buffer.VALUE_TYPE_INT64 )

end


function init(self)

    self.new_buffer = buffer.create(6, {
            { name = hash("position"),
             type=buffer.VALUE_TYPE_FLOAT32,
             count = 3 }
    })

    test_number_types(self.new_buffer)

    -- chaning the number type should fail with RESULT_METADATA_INVALID
    local status, result = pcall(function (thebuffer)
        local metadata1 = { 1, 2, 3}
        buffer.set_metadata(thebuffer, hash("metadata-entry"), metadata1, buffer.VALUE_TYPE_INT8)
        buffer.set_metadata(thebuffer, hash("metadata-entry"), metadata1, buffer.VALUE_TYPE_UINT8)
    end, self.new_buffer)
    assert(not status and string.match(result, "RESULT_METADATA_INVALID"), "update metadata with different number type should fail with RESULT_METADATA_INVALID" )

    -- changing the count of number should fail with RESULT_METADATA_INVALID
    local status, result = pcall(function (thebuffer)
        local metadata1 = { 1, 2, 3}
        local metadata2 = { 1, 2, 3, 4}
        buffer.set_metadata(thebuffer, hash("metadata-entry2"), metadata1, buffer.VALUE_TYPE_INT8)
        buffer.set_metadata(thebuffer, hash("metadata-entry2"), metadata2, buffer.VALUE_TYPE_INT8)
    end, self.new_buffer)
    assert(not status and string.match(result, "RESULT_METADATA_INVALID"), "update metadata with different count of numbers should fail with RESULT_METADATA_INVALID" )

end
